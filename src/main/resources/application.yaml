openapi: 3.0.0
info:
  title: Task Management API
  description: API for managing tasks and user authentication
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server"
paths:
  /auth/login:
    post:
      summary: Authenticate a user and return a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
        '401':
          description: Unauthorized

  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                role:
                  type: string
                active:
                  type: boolean
      responses:
        '200':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request

  /api/tasks:
    get:
      summary: Get all tasks
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /api/tasks/{id}:
    get:
      summary: Get a specific task by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
    put:
      summary: Update a specific task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
    delete:
      summary: Delete a specific task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Task deleted
        '404':
          description: Task not found

  /api/tasks/{taskId}/steps:
    get:
      summary: Get all steps for a specific task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of steps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Step'
    post:
      summary: Add a step to a specific task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Step'
      responses:
        '201':
          description: Step created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'

  /api/tasks/steps/{stepId}:
    get:
      summary: Get a specific step by ID
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Step details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '404':
          description: Step not found
    put:
      summary: Update a specific step
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Step'
      responses:
        '200':
          description: Step updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '404':
          description: Step not found
    delete:
      summary: Delete a specific step
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Step deleted
        '404':
          description: Step not found

  /api/completed:
    get:
      summary: Get all completed tasks
      responses:
        '200':
          description: List of completed tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

  /api/users:
    get:
      summary: Get all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/users/{userId}:
    get:
      summary: Get a specific user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      summary: Delete a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        completed:
          type: boolean
        steps:
          type: array
          items:
            $ref: '#/components/schemas/Step'
        user:
          $ref: '#/components/schemas/User'
    Step:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        completed:
          type: boolean
        task:
          $ref: '#/components/schemas/Task'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        role:
          type: string
        active:
          type: boolean
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
